-- launch mongo
C:\mongodb\bin\mongod.exe  --config C:\mongodb\data\db\mongod.cfg

-- try to not lose the best strat in each generation through mutation (keep one pure copy)

-- figure out how to send info from the test to GA to the tester

-- read the wiki on GAs: https://en.wikipedia.org/wiki/Genetic_algorithm

-- first launch mongo with C:\mongodb\bin\mongod.exe  --config C:\mongodb\data\db\mongod.cfg

-- now launch the experiment server in C:\Users\Donal\Documents\Projects\RESEARCH\bikeracing\TeamPursuitModel\TeamPursuitModel\experiment_server
node app.js

-- why don't I move the whole thing onto the node server??

-- how do i serve up a flat html page?

-- foook... i already had a page built for creating settings :-( this is now done twice. but hey.

-- create a new url path for http://127.0.0.1:3003/ga/ and load up the main ga page, no?

-- ok, so moved a lot of files, and renamed stuff, and it now loads from node

-- clean up the js- put it all under a public/js folder

-- ok, so it now serves up the files and seeeems to run the GA

-- now look at getting the settings to port from the GA to the game version

-- create a new route for the game version 

-- ok, can now access and run the original game via http://127.0.0.1:3003/tpgame

-- oh, since everything is on node I can just send the id of the settings in the db long with the instructions?

-- tpgame can then do its own lookup? try try

-- id is not being returned from the db. do i need to add it to the global_settings?

-- how can I add it... don't want to save it in the general settings. 
-- maybe store it in another field? Hidden?

-- bug: if i use one very strong rider it evolves to be the lead rider, but when i watch it in the game it drops the others and laps them, so the time taken is much longer than the GA's version. Must be some difference in the physics again :-(

-- at least fix the GA to keep the best riders

-- fuck, GA is actually very different, I must have changed it a lot... looks at groups in the population. But it is losing the winners as it goes from one generation to the next in some cases. Must fix.

-- note: if instructions or startign order do not change, there's no need to re-run that race

- save this file and commit everything.

-- two main issues right now: putting strong rider on front for too long. ANd GA losing the best strat from popualtion to popualtion.

-- 16th march
-- look at losing-best-strat issue first 
-- record the best strat after running races, then find where it is in the next gen.

-- ok, need to work on how to identify strats and add a few more properties, like the generation, a type, and a variant counter
-- all variant ids are the same? eek. need to set up the id props at the first gen as well

everything in the id is undefined after we run first batch of races. Warum??

-- now they have legit ids from one generation to the next-- need to now look at the groups/tounraments in a generation and see what is happpening there

-- looks like it works ok and the fastest strat is kept

-- BUT!! found example where the starting order of the fastest race is changed! this must be it!

-- also found another one where the time taken jumps by 1- but it looks like the instrucitons are identical and starting_ordet oo, so maybe a rounding issue?

-- ok, so starting_order changes for the whole population hwne it is shuffled, not for a single race... oops

-- right, so thsi reproduces the bug:
a = {id:1,s:[0,1,2]};
b = {};
b.id = 2;
b.s = a.s;
b.s[0] = 5

-- now both a.s[0] and b.s[0] will be 5. when we assign b.s = a.s it is a reference that is stored. then because we shuffle in place and do not return a new array, kerpoom!

-- could look for JS 'deepcopy' and change = line OR return a new array with the shuffle instead of just editing the original?

-- made slight change to the shuffle array. not sure why it goes down through the array and not up. why?

-- need a deep copy. leave shuffle as is (uses less ram?) use Array.from() when we assign start_order

let a = [1,2,3];
let b = Array.from(a);

-- no waits, can use the ES6 b = [...a] syntax :-)

-- what else am I shuffling and does it break?
-- just the new_population i thinks

-- goooood, seems to have fixed that issue.

-- now on to the problem with getting different outcomes in the visual and ga races 

-- so when i run the ga i am getting faster times... in the game version the lead riders are dropping others 

-- will have to switch on the big logging messages setting to see what's goign down.

-- was able to run the logging on the ga end but not the game one

-- settings id is not loaded into the url in the ga results 

-- ah, when i update settings it doesn't display the id <span>

-- fixed... update relies with data.value.name etc. 

-- now need to change so that the logging is NOT done when running the GA itself... 

-- bah, getting the error Uncaught (in promise) TypeError: Assignment to constant variable. seems you can't mod anything that comes in from an export, so I have to assigne those to local vars instead

-- enough for today... fixed one bug, now need to retest the game, currenlty it does seem to displat intstructions but...
-- looks like the start_order is NOT being used now when i load settings via url- makes sense as it ALSO gets a start order from the settings and needs to make sure the url one is taken 

-- also, fatigue dispaly looks suspicious, will need to look into wy it is 5/5 for the strong rider.

-- wednesday 18th, day after P day. do one hour. also, do diary today. and get outside.

-- created a new batch script to launch things quicker, now have START_TPURSUIT_APP.bat on the desktop to start mongo, node and chrome

-- now try to change how settings are applied... basic problem=url start_order loaded, then db settings loaded that overwrite this.. split things up.
-- 1, get id
-- 2, load db settings
-- 3, add start_order and instructions from url

-- done BUT looks like the order is not used :-( will need to dig more. first switch off the logging to speedo speedo.

-- balls, fixed some more BUT time still off... are the instructions being run? 

-- ignores first two instrucitons??

-- ok, it gets the instruction but the rider doesn't drop back... a rider is supposed to drop back only in certain track areas so the IF for this may be failing? will continue later, my hour is done and wellll done.

-- -- monday april 6th
-- to get back into it, add a vertical slider on the game page to adjust the SPEED of the game, i.e. the wait between moves... maybe in notches, 0-1 second

-- 1 = slowest, maybe 1000
-- 10 = quickest, maybe 1
-- slider provides 1 - 10
-- so what formula? (10-x)*100?

-- first attempt, 200 is way too slow, need to rejig and shrink everything a bit. linear from 0 to 1000
-- ok, so new formula is simply (10-x)*60. defaulted to 120. works ol. commit to git then
-- done, a/G_6

-- try to make the GA page a 3 column design as opposed to just 1
-- put rows and cols into the GA page
-- add tooltop text to the table
--fuckkk... massive problems caused by <script src = "js/ga.js" type="module"></script>
-- why was type="module" included? still seems to work without it and fixes painful funciton not defined bug

-- ok, added column names, and also added a double-click event that updates the single race settings

--robustness check not working
-- page looks much neater: do the same for the race page itself.

-- tuesday April 7th., home. coronatime

-- first get the robustness going. was throwing an error.

-- ui. when you double-click an id, have note saying 'generation 23 best race loaded'

-- done, beter comment, robustness works, also added id to results.

-- remove the unused info from the end of the results table

-- move to the game view and start improving
-- add bootstrap row/cols 

-- stuff won't fit, need to move things about

-- ok, better now, need to look ahead

-- aim is to have d3.js drawring a bunch of different graphs... need to be able to get the data to d3
-- could look at
-- 1: returning the data from the worker as pure json
-- 2: parsing that json, i.e. doing the display code on the front JS
-- 3: saving that results json to mongo
-- 4: adding enough info when saving to be able to list and retrive again, such that it is somewhat replicable, e.g. all settings used 
-- 5: having another page accessed from the panel that would allow me to go through the results and start building graphs for the data
-- first graph: fitness from generation to generation (simple line)
-- need to be able to save/export the graph as jpen/png
-- as usual commit to git

-- wednesday april 8th.

-- so far a shit day for productivity. pure muck. and already 5PM 5PM that's fuckign crazy

-- changed bat file to also load this file.

-- work on saving results to mongo after running a 'test'.
-- need to save the date_time plus all of the settings used... 
-- added a button but big change needed to save results: need to return the results as a JSON array, not as HTML, dameet.

-- Thursday. work until 3 at getting json results and then trying to save them
-- now returns json but have to put the table drawring code in

-- ok, results now show and are available as json. SO i now can look at storing them
-- add a date_time to the results (maybe start time and end_time?

-- ok, the damn things now save
-- add a message tot he front end to say it has saved
--oh, forgot to add the notes field: what other user input might be needed?

-- notes added, awkward to get the joi to work, not yet returning the _id and printing 'new results added'

-- Friday April 10th
-- spend a good hour at it right now to try and make progress
-- results ARE saving but no way to view them 
-- first test saving again and make sure the messages are ok

-- ok result is back. notes are not being saved...
-- was missing a line in app.js. they are saving now

-- add a new page to look at results... will need a way to search for them?
-- first, list all
-- make a menu for the three pages, make the whole thing like a site

-- why do I have to use results.html but can just do ga and not ga.html?

-- long break. now have a menu bar and a 5 pages. need to add content but go look at the results

-- add a new JS file for this

-- aim 1: display a table with results.

-- need to add a date created to the results (not the ga results inside?)